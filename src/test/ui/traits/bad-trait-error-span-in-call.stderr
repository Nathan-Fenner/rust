error[E0277]: the trait bound `Q: T3` is not satisfied
  --> $DIR/bad-trait-error-span-in-call.rs:72:60
   |
LL |     want(Wrapper { value: Burrito { spicy: false, filling: q } });
   |     ---- required by a bound introduced by this call       ^ the trait `T3` is not implemented for `Q`
   |
note: required for `Burrito<Q>` to implement `T2`
  --> $DIR/bad-trait-error-span-in-call.rs:22:13
   |
LL | impl<A: T3> T2 for Burrito<A> {}
   |             ^^     ^^^^^^^^^^
note: required for `Wrapper<Burrito<Q>>` to implement `T1`
  --> $DIR/bad-trait-error-span-in-call.rs:16:13
   |
LL | impl<B: T2> T1 for Wrapper<B> {}
   |             ^^     ^^^^^^^^^^
note: required by a bound in `want`
  --> $DIR/bad-trait-error-span-in-call.rs:52:12
   |
LL | fn want<V: T1>(_x: V) {}
   |            ^^ required by this bound in `want`
help: consider restricting type parameter `Q`
   |
LL | fn example<Q: T3>(q: Q) {
   |             ++++

error[E0277]: the trait bound `Q: T3` is not satisfied
  --> $DIR/bad-trait-error-span-in-call.rs:76:84
   |
LL |     want(Wrapper { value: BurritoKinds::SmallBurrito { spicy: true, small_filling: q } });
   |     ---- required by a bound introduced by this call                               ^ the trait `T3` is not implemented for `Q`
   |
note: required for `BurritoKinds<Q>` to implement `T2`
  --> $DIR/bad-trait-error-span-in-call.rs:32:13
   |
LL | impl<D: T3> T2 for BurritoKinds<D> {}
   |             ^^     ^^^^^^^^^^^^^^^
note: required for `Wrapper<BurritoKinds<Q>>` to implement `T1`
  --> $DIR/bad-trait-error-span-in-call.rs:16:13
   |
LL | impl<B: T2> T1 for Wrapper<B> {}
   |             ^^     ^^^^^^^^^^
note: required by a bound in `want`
  --> $DIR/bad-trait-error-span-in-call.rs:52:12
   |
LL | fn want<V: T1>(_x: V) {}
   |            ^^ required by this bound in `want`
help: consider restricting type parameter `Q`
   |
LL | fn example<Q: T3>(q: Q) {
   |             ++++

error[E0277]: the trait bound `Q: T3` is not satisfied
  --> $DIR/bad-trait-error-span-in-call.rs:80:39
   |
LL |     want(Wrapper { value: Taco(false, q) });
   |     ----                              ^ the trait `T3` is not implemented for `Q`
   |     |
   |     required by a bound introduced by this call
   |
note: required for `Taco<Q>` to implement `T2`
  --> $DIR/bad-trait-error-span-in-call.rs:35:13
   |
LL | impl<E: T3> T2 for Taco<E> {}
   |             ^^     ^^^^^^^
note: required for `Wrapper<Taco<Q>>` to implement `T1`
  --> $DIR/bad-trait-error-span-in-call.rs:16:13
   |
LL | impl<B: T2> T1 for Wrapper<B> {}
   |             ^^     ^^^^^^^^^^
note: required by a bound in `want`
  --> $DIR/bad-trait-error-span-in-call.rs:52:12
   |
LL | fn want<V: T1>(_x: V) {}
   |            ^^ required by this bound in `want`
help: consider restricting type parameter `Q`
   |
LL | fn example<Q: T3>(q: Q) {
   |             ++++

error[E0277]: the trait bound `Q: T3` is not satisfied
  --> $DIR/bad-trait-error-span-in-call.rs:84:53
   |
LL |     want(Wrapper { value: TacoKinds::OneTaco(false, q) });
   |     ----                                            ^ the trait `T3` is not implemented for `Q`
   |     |
   |     required by a bound introduced by this call
   |
note: required for `TacoKinds<Q>` to implement `T2`
  --> $DIR/bad-trait-error-span-in-call.rs:41:13
   |
LL | impl<F: T3> T2 for TacoKinds<F> {}
   |             ^^     ^^^^^^^^^^^^
note: required for `Wrapper<TacoKinds<Q>>` to implement `T1`
  --> $DIR/bad-trait-error-span-in-call.rs:16:13
   |
LL | impl<B: T2> T1 for Wrapper<B> {}
   |             ^^     ^^^^^^^^^^
note: required by a bound in `want`
  --> $DIR/bad-trait-error-span-in-call.rs:52:12
   |
LL | fn want<V: T1>(_x: V) {}
   |            ^^ required by this bound in `want`
help: consider restricting type parameter `Q`
   |
LL | fn example<Q: T3>(q: Q) {
   |             ++++

error[E0277]: the trait bound `Q: T3` is not satisfied
  --> $DIR/bad-trait-error-span-in-call.rs:88:74
   |
LL |     want(Wrapper { value: GenericBurrito { spiciness: NotSpicy, filling: q } });
   |     ---- required by a bound introduced by this call                     ^ the trait `T3` is not implemented for `Q`
   |
note: required for `GenericBurrito<NotSpicy, Q>` to implement `T2`
  --> $DIR/bad-trait-error-span-in-call.rs:47:16
   |
LL | impl<X, Y: T3> T2 for GenericBurrito<X, Y> {}
   |                ^^     ^^^^^^^^^^^^^^^^^^^^
note: required for `Wrapper<GenericBurrito<NotSpicy, Q>>` to implement `T1`
  --> $DIR/bad-trait-error-span-in-call.rs:16:13
   |
LL | impl<B: T2> T1 for Wrapper<B> {}
   |             ^^     ^^^^^^^^^^
note: required by a bound in `want`
  --> $DIR/bad-trait-error-span-in-call.rs:52:12
   |
LL | fn want<V: T1>(_x: V) {}
   |            ^^ required by this bound in `want`
help: consider restricting type parameter `Q`
   |
LL | fn example<Q: T3>(q: Q) {
   |             ++++

error[E0277]: the trait bound `Q: T3` is not satisfied
  --> $DIR/bad-trait-error-span-in-call.rs:92:31
   |
LL |     want(Wrapper { value: (3, q) });
   |     ----                      ^ the trait `T3` is not implemented for `Q`
   |     |
   |     required by a bound introduced by this call
   |
note: required for `(i32, Q)` to implement `T2`
  --> $DIR/bad-trait-error-span-in-call.rs:50:20
   |
LL | impl<A: T3, B: T3> T2 for (A, B) {}
   |                    ^^     ^^^^^^
note: required for `Wrapper<(i32, Q)>` to implement `T1`
  --> $DIR/bad-trait-error-span-in-call.rs:16:13
   |
LL | impl<B: T2> T1 for Wrapper<B> {}
   |             ^^     ^^^^^^^^^^
note: required by a bound in `want`
  --> $DIR/bad-trait-error-span-in-call.rs:52:12
   |
LL | fn want<V: T1>(_x: V) {}
   |            ^^ required by this bound in `want`
help: consider restricting type parameter `Q`
   |
LL | fn example<Q: T3>(q: Q) {
   |             ++++

error[E0277]: the trait bound `Q: T3` is not satisfied
  --> $DIR/bad-trait-error-span-in-call.rs:96:27
   |
LL |     want(Wrapper { value: AliasBurrito { spiciness: q, filling: q } });
   |     ----                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `T3` is not implemented for `Q`
   |     |
   |     required by a bound introduced by this call
   |
note: required for `GenericBurrito<Q, Q>` to implement `T2`
  --> $DIR/bad-trait-error-span-in-call.rs:47:16
   |
LL | impl<X, Y: T3> T2 for GenericBurrito<X, Y> {}
   |                ^^     ^^^^^^^^^^^^^^^^^^^^
note: required for `Wrapper<GenericBurrito<Q, Q>>` to implement `T1`
  --> $DIR/bad-trait-error-span-in-call.rs:16:13
   |
LL | impl<B: T2> T1 for Wrapper<B> {}
   |             ^^     ^^^^^^^^^^
note: required by a bound in `want`
  --> $DIR/bad-trait-error-span-in-call.rs:52:12
   |
LL | fn want<V: T1>(_x: V) {}
   |            ^^ required by this bound in `want`
help: consider restricting type parameter `Q`
   |
LL | fn example<Q: T3>(q: Q) {
   |             ++++

error[E0277]: the trait bound `Q: T1` is not satisfied
  --> $DIR/bad-trait-error-span-in-call.rs:99:19
   |
LL |     want(Two { a: Two { a: (), b: q }, b: () });
   |     ----          ^^^^^^^^^^^^^^^^^^^ the trait `T1` is not implemented for `Q`
   |     |
   |     required by a bound introduced by this call
   |
note: required for `Two<Two<(), Q>, ()>` to implement `T1`
  --> $DIR/bad-trait-error-span-in-call.rs:65:19
   |
LL | impl<X, Y: T1, Z> T1 for Two<Two<X, Y>, Z> {}
   |                   ^^     ^^^^^^^^^^^^^^^^^
note: required by a bound in `want`
  --> $DIR/bad-trait-error-span-in-call.rs:52:12
   |
LL | fn want<V: T1>(_x: V) {}
   |            ^^ required by this bound in `want`
help: consider restricting type parameter `Q`
   |
LL | fn example<Q: T1>(q: Q) {
   |             ++++

error[E0277]: the trait bound `Q: T1` is not satisfied
  --> $DIR/bad-trait-error-span-in-call.rs:105:27
   |
LL |     want(
   |     ---- required by a bound introduced by this call
LL |         Two { a: Two { a: (), b: Two { a: Two { a: (), b: q }, b: () } }, b: () },
   |                           ^^ the trait `T1` is not implemented for `Q`
   |
note: required for `Two<Two<(), Q>, ()>` to implement `T1`
  --> $DIR/bad-trait-error-span-in-call.rs:65:19
   |
LL | impl<X, Y: T1, Z> T1 for Two<Two<X, Y>, Z> {}
   |                   ^^     ^^^^^^^^^^^^^^^^^
   = note: 1 redundant requirement hidden
   = note: required for `Two<Two<(), Two<Two<(), Q>, ()>>, ()>` to implement `T1`
note: required by a bound in `want`
  --> $DIR/bad-trait-error-span-in-call.rs:52:12
   |
LL | fn want<V: T1>(_x: V) {}
   |            ^^ required by this bound in `want`
help: consider restricting type parameter `Q`
   |
LL | fn example<Q: T1>(q: Q) {
   |             ++++

error: aborting due to 9 previous errors

For more information about this error, try `rustc --explain E0277`.
